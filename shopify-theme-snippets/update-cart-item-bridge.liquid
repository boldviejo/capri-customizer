{% comment %}
  update-cart-item-bridge.liquid - Bridge page for updating customized items in the cart
  
  To use:
  1. Create a page in your Shopify admin with handle "update-cart-item-bridge"
  2. Set this file as the template
  
  This page handles updating existing cart items with new customization details.
  It receives parameters from the edit form and updates the cart using the Shopify Cart API.
{% endcomment %}

{% layout none %}

<!DOCTYPE html>
<html lang="{{ shop.locale }}">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Updating Your Cart... - {{ shop.name }}</title>
  
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, San Francisco, Segoe UI, Roboto, Helvetica Neue, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #fff;
      color: #333;
      line-height: 1.5;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      overflow: hidden;
    }
    .container {
      text-align: center;
      max-width: 500px;
      padding: 20px;
    }
    .spinner {
      display: inline-block;
      width: 50px;
      height: 50px;
      border: 3px solid rgba(0, 0, 0, 0.1);
      border-radius: 50%;
      border-top-color: #000;
      animation: spin 1s ease-in-out infinite;
      margin-bottom: 20px;
    }
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    .message {
      margin-top: 20px;
      font-size: 18px;
    }
    .error {
      color: #d82c0d;
      margin-top: 20px;
      background: #fbeae5;
      padding: 15px;
      border-radius: 4px;
      display: none;
    }
    .success {
      color: #008060;
      margin-top: 20px;
      background: #e3f1df;
      padding: 15px;
      border-radius: 4px;
      display: none;
    }
    .debug {
      text-align: left;
      background: #f9fafb;
      padding: 15px;
      border-radius: 4px;
      border: 1px solid #e0e0e0;
      font-family: monospace;
      font-size: 12px;
      overflow: auto;
      max-height: 200px;
      margin-top: 20px;
      display: none;
    }
    .actions {
      margin-top: 20px;
      display: none;
    }
    .button {
      display: inline-block;
      border: 1px solid #bababa;
      color: #323232;
      padding: 10px 20px;
      background: #fff;
      border-radius: 4px;
      text-decoration: none;
      margin: 0 5px;
      cursor: pointer;
      font-size: 14px;
    }
    .button-primary {
      background: #008060;
      color: #fff;
      border-color: #008060;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="spinner" id="spinner"></div>
    <div class="message" id="message">
      Updating your customized item...
    </div>
    <div id="success" class="success"></div>
    <div id="error" class="error"></div>
    <div id="debug" class="debug"></div>
    <div id="actions" class="actions">
      <a href="/cart" class="button button-primary">View Cart</a>
      <a href="/collections/all" class="button">Continue Shopping</a>
    </div>
  </div>

  <script>
    // Store parameters for use throughout the script
    let params = {};
    
    // Helper function to clear all redirect-related data
    function clearRedirectData() {
      if (typeof sessionStorage !== 'undefined') {
        sessionStorage.removeItem('redirectAttempt');
        sessionStorage.removeItem('pendingBridgeRequest');
        sessionStorage.removeItem('retryCount');
      }
    }
    
    // Function to extract and validate URL parameters
    function getParams() {
      const urlParams = new URLSearchParams(window.location.search);
      
      // Extract all parameters
      return {
        variantId: urlParams.get('variant_id'),
        customText: urlParams.get('custom_text'),
        fontFamily: urlParams.get('font_family'),
        fontSize: urlParams.get('font_size'),
        textColor: urlParams.get('text_color'),
        position: urlParams.get('position'),
        petPhotoUrl: urlParams.get('pet_photo_url'),
        itemKey: urlParams.get('item_key')
      };
    }
    
    // Show error message function
    function showError(message, debugInfo) {
      // Clear any redirect loop data
      clearRedirectData();
      
      // Hide spinner, update message
      document.getElementById('spinner').style.display = 'none';
      document.getElementById('message').textContent = 'There was a problem updating your cart';
      
      // Show error message
      const errorEl = document.getElementById('error');
      errorEl.textContent = message;
      errorEl.style.display = 'block';
      
      // Show debug info if available
      if (debugInfo) {
        const debugEl = document.getElementById('debug');
        if (typeof debugInfo === 'object') {
          debugEl.textContent = JSON.stringify(debugInfo, null, 2);
        } else {
          debugEl.textContent = debugInfo;
        }
        debugEl.style.display = 'block';
      }
      
      // Show action buttons
      document.getElementById('actions').style.display = 'block';
      
      // Log error to console
      console.error('Cart update error:', message, debugInfo);
    }
    
    // Show success message function
    function showSuccess(message) {
      // Clear any redirect loop data
      clearRedirectData();
      
      // Hide spinner, update message
      document.getElementById('spinner').style.display = 'none';
      document.getElementById('message').textContent = 'Successfully updated your cart!';
      
      // Show success message
      const successEl = document.getElementById('success');
      successEl.textContent = message;
      successEl.style.display = 'block';
      
      // Show action buttons
      document.getElementById('actions').style.display = 'block';
      
      // Redirect to cart after delay
      setTimeout(function() {
        window.location.href = '/cart';
      }, 2000);
    }
    
    // Function to update cart item
    async function updateCartItem() {
      try {
        // Check if we're in a redirect loop
        if (typeof sessionStorage !== 'undefined') {
          const redirectAttempt = parseInt(sessionStorage.getItem('redirectAttempt') || '0', 10);
          console.log('Current redirect attempt count:', redirectAttempt);
          
          if (redirectAttempt > 2) {
            // We're in a redirect loop, show error and clear data
            clearRedirectData();
            showError('Redirect loop detected while updating cart. Please try again or return to cart.', {
              redirectAttempts: redirectAttempt 
            });
            return;
          }
          
          // Increment the redirect attempt counter
          sessionStorage.setItem('redirectAttempt', (redirectAttempt + 1).toString());
        }
        
        // Get and validate parameters
        params = getParams();
        console.log('Parameters received:', params);
        
        // Validate required parameters
        if (!params.variantId) {
          showError('Missing product variant ID', params);
          return;
        }
        
        if (!params.itemKey) {
          showError('Missing item key - required to identify which cart item to update', params);
          return;
        }
        
        // Format the properties object
        const properties = {};
        
        // Add parameters to properties if they exist
        if (params.customText) properties['Custom Text'] = params.customText;
        if (params.fontFamily) properties['Font'] = params.fontFamily;
        if (params.fontSize) properties['Font Size'] = params.fontSize;
        if (params.textColor) properties['Text Color'] = params.textColor;
        if (params.position) properties['Position'] = params.position;
        if (params.petPhotoUrl) properties['Pet Photo URL'] = params.petPhotoUrl;
        
        console.log('Updating cart item with properties:', properties);
        
        try {
          // First, get the current cart to find the line item
          const cartResponse = await fetch('/cart.js');
          if (!cartResponse.ok) {
            throw new Error(`Failed to fetch cart: ${cartResponse.status} ${cartResponse.statusText}`);
          }
          
          const cart = await cartResponse.json();
          console.log('Current cart:', cart);
          
          // Find the item by key
          const item = cart.items.find(i => i.key === params.itemKey);
          if (!item) {
            throw new Error(`Item with key ${params.itemKey} not found in cart`);
          }
          
          console.log('Found item to update:', item);
          
          // Use the Shopify Cart API to update the item
          // We need to use the line item index (1-based) for the API
          const lineItemIndex = cart.items.indexOf(item) + 1;
          
          // Create update request data
          const updateData = {
            id: params.itemKey,
            properties: properties
          };
          
          console.log('Sending update request:', updateData);
          
          // Send the update request
          const updateResponse = await fetch('/cart/change.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(updateData)
          });
          
          if (!updateResponse.ok) {
            throw new Error(`Failed to update cart: ${updateResponse.status} ${updateResponse.statusText}`);
          }
          
          const updatedCart = await updateResponse.json();
          console.log('Cart updated successfully:', updatedCart);
          
          // Show success message and redirect
          showSuccess('Your customized item was updated successfully!');
          
        } catch (fetchError) {
          console.error('Error during cart update:', fetchError);
          showError(
            `Failed to update cart: ${fetchError.message}`, 
            { error: fetchError.stack, params: params }
          );
        }
        
      } catch (error) {
        console.error('Unexpected error during cart update:', error);
        showError(
          'An unexpected error occurred while updating your cart', 
          { error: error.stack, params: params }
        );
      }
    }
    
    // Start the update process
    document.addEventListener('DOMContentLoaded', updateCartItem);
  </script>
</body>
</html> 