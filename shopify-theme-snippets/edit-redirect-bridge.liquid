{% comment %}
  edit-redirect-bridge.liquid - Bridge template for redirecting from Shopify cart to customizer app's edit page
  
  To use:
  1. Create a page in your Shopify admin with the handle "edit-redirect-bridge"
  2. Select this template for the page
  
  This template receives parameters from the Edit button in the cart and redirects to the customizer app's edit page.
{% endcomment %}

{% layout none %}

<!DOCTYPE html>
<html lang="{{ shop.locale }}">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Redirecting to Customizer... - {{ shop.name }}</title>
  
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, San Francisco, Segoe UI, Roboto, Helvetica Neue, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #fff;
      color: #333;
      line-height: 1.5;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      overflow: hidden;
    }
    .container {
      text-align: center;
      max-width: 400px;
      padding: 20px;
    }
    .spinner {
      display: inline-block;
      width: 50px;
      height: 50px;
      border: 3px solid rgba(0, 0, 0, 0.1);
      border-radius: 50%;
      border-top-color: #000;
      animation: spin 1s ease-in-out infinite;
      margin-bottom: 20px;
    }
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    .message {
      margin-top: 20px;
      font-size: 18px;
    }
    .error {
      color: #d82c0d;
      margin-top: 20px;
      background: #fbeae5;
      padding: 10px;
      border-radius: 4px;
      display: none;
    }
    .debug {
      text-align: left;
      background: #f9fafb;
      padding: 10px;
      border-radius: 4px;
      border: 1px solid #e0e0e0;
      font-family: monospace;
      font-size: 12px;
      overflow: auto;
      max-height: 200px;
      margin-top: 20px;
      display: none;
    }
    .actions {
      margin-top: 20px;
      display: none;
    }
    .button {
      display: inline-block;
      border: 1px solid #bababa;
      color: #323232;
      padding: 8px 15px;
      background: #fff;
      border-radius: 4px;
      text-decoration: none;
      margin: 0 5px;
      cursor: pointer;
    }
    .button-primary {
      background: #008060;
      color: #fff;
      border-color: #008060;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="spinner"></div>
    <div class="message">
      Preparing to redirect to customizer...
    </div>
    <div id="confirmation" style="display: none; text-align: center; margin-top: 20px;">
      <p style="margin-bottom: 15px;">You're about to edit your customized item.</p>
      <button id="confirm-redirect" class="button button-primary" style="margin-right: 10px;">Continue to Customizer</button>
      <a href="/cart" class="button">Cancel and Return to Cart</a>
    </div>
    <div id="error" class="error"></div>
    <div id="debug" class="debug"></div>
    <div id="actions" class="actions">
      <a href="/cart" class="button">Return to Cart</a>
      <button onclick="retryRedirect()" class="button button-primary">Try Again</button>
    </div>
  </div>

  <script>
    // Store parameters globally for retry function
    let allParams = {};
    let targetUrl = '';
    
    function showError(message, details) {
      // Hide spinner
      document.querySelector('.spinner').style.display = 'none';
      
      // Update and show error message
      const errorElement = document.getElementById('error');
      errorElement.textContent = message;
      errorElement.style.display = 'block';
      
      // Show debug info if available
      if (details) {
        const debugElement = document.getElementById('debug');
        debugElement.textContent = JSON.stringify(details, null, 2);
        debugElement.style.display = 'block';
      }
      
      // Show action buttons
      document.getElementById('actions').style.display = 'block';
      
      // Update message
      document.querySelector('.message').textContent = 'There was a problem redirecting to the customizer';
    }
    
    function getParam(name) {
      const urlParams = new URLSearchParams(window.location.search);
      return urlParams.get(name);
    }
    
    function retryRedirect() {
      if (targetUrl) {
        // Reset the redirect attempt counter
        sessionStorage.removeItem('redirectAttempt');
        window.location.href = targetUrl;
      } else {
        showError('Unable to retry. No valid target URL available.', allParams);
      }
    }
    
    function clearRedirectLoopData() {
      // Clear all stored data related to redirects
      sessionStorage.removeItem('redirectAttempt');
      sessionStorage.removeItem('pendingBridgeRequest');
      sessionStorage.removeItem('retryCount');
    }
    
    function showConfirmation() {
      // Hide spinner
      document.querySelector('.spinner').style.display = 'none';
      
      // Update message and show confirmation buttons
      document.querySelector('.message').textContent = 'Ready to edit your customization';
      document.getElementById('confirmation').style.display = 'block';
      
      // Add event listener to the confirmation button
      document.getElementById('confirm-redirect').addEventListener('click', function() {
        // Reset any existing counter first, then set to 1 for this attempt
        sessionStorage.removeItem('redirectAttempt');
        sessionStorage.setItem('redirectAttempt', '1');
        
        // Redirect to the target URL
        window.location.href = targetUrl;
      });
    }
    
    (function() {
      try {
        // Reset redirect counter when this bridge page loads
        // This is critical to break the loop - we only count redirects after leaving this page
        sessionStorage.removeItem('redirectAttempt');
        
        // Get parameters from URL and store them globally
        allParams = {
          productHandle: getParam('product_handle'),
          variantId: getParam('variant_id'),
          customText: getParam('custom_text'),
          fontFamily: getParam('font_family'),
          fontSize: getParam('font_size'),
          textColor: getParam('text_color'),
          position: getParam('position'),
          petPhotoUrl: getParam('pet_photo_url'),
          itemKey: getParam('item_key')
        };
        
        // Log all parameters for debugging
        console.log('Parameters received:', allParams);
        
        // Validate required parameters
        if (!allParams.productHandle) {
          clearRedirectLoopData();
          showError('Missing product information (handle) in URL parameters', allParams);
          return;
        }

        // Build the redirect URL to the Cloud Run app
        const appDomain = "https://capri-customizer-86025189386.us-central1.run.app";
        const path = `/edit/${allParams.productHandle}`;
        
        try {
          // Create URL with explicit base to avoid issues
          targetUrl = new URL(path, appDomain).toString();
          
          // Create search params to attach to the URL
          const searchParams = new URLSearchParams();
          
          // Add parameters to the URL params
          if (allParams.variantId) searchParams.append('variant_id', allParams.variantId);
          if (allParams.customText) searchParams.append('custom_text', allParams.customText);
          if (allParams.fontFamily) searchParams.append('font_family', allParams.fontFamily);
          if (allParams.fontSize) searchParams.append('font_size', allParams.fontSize);
          if (allParams.textColor) searchParams.append('text_color', allParams.textColor);
          if (allParams.position) searchParams.append('position', allParams.position);
          if (allParams.petPhotoUrl) searchParams.append('pet_photo_url', allParams.petPhotoUrl);
          if (allParams.itemKey) searchParams.append('item_key', allParams.itemKey);
          
          // Compose final URL
          const search = searchParams.toString();
          if (search) {
            targetUrl += '?' + search;
          }
          
          // Log the final URL for debugging
          console.log('Ready to redirect to edit page:', targetUrl);
          
          // Show confirmation instead of immediate redirect
          setTimeout(showConfirmation, 500);
          
        } catch (urlError) {
          clearRedirectLoopData();
          showError('Error forming the redirect URL', {
            error: urlError.message, 
            baseUrl: appDomain,
            path: path,
            params: allParams
          });
        }
      } catch (error) {
        clearRedirectLoopData();
        showError('Unexpected error during redirect', {
          error: error.message,
          stack: error.stack
        });
      }
    })();
  </script>
</body>
</html> 